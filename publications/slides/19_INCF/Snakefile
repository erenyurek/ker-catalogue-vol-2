import os
import fnmatch

basedir = os.getcwd()
#templatedir = os.path.join(basedir, "templates")

# --data-dir=<DIRECTORY>
#     Specify the user data directory to search for pandoc data files. If this
#     option is not specified, the default user data directory will be used.
#     This is, in UNIX: $HOME/.pandoc [... in Windows, ...].
#     You can find the default user data directory on your
#     system by looking at the output of pandoc --version. A
#     reference.odt, reference.docx, epub.css, templates,       <<< !!!
#     slidy, slideous, or s5 directory placed in this
#     directory will override pandocâ€™s normal defaults.
commonargs = '--standalone --data-dir="%s"' % basedir

extensions = [
    'link_attributes',
    'implicit_figures',
    'yaml_metadata_block',
    'pandoc_title_block',
    'tex_math_dollars',
    'smart',
]
srcfmt = "+".join(['markdown'] + extensions)

inputfiles = fnmatch.filter(os.listdir(basedir), "*.md")
if 'yaml_metadata_block' in extensions:
    inputfiles.append('metadata.yaml')

configfile: 'config.yaml'

rule done:
    input:
        # expand('{name}.html', name=config['main_target']),
        #'test-document.pdf',
        #'test-slides.pdf',
        #'test-poster.pdf',
        #'test-poster.tex',
        expand('{name}-presentation.html', name=config['main_target']),
        #'test-ebook2.epub',

rule build_html:
    input:
        lambda wc: config[wc.name],
        document='{name}.md',
        meta='metadata.yaml',
        css='document.css',
    output:
        '{name,.*(?<!-presentation)}.html',
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t html {input.document} {input.meta} --css {input.css} -o {output}
        '''

rule build_pdfdocument:
    input:
        document='{name}.md',
        meta='metadata.yaml',
    output:
        '{name}-document.pdf'
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t latex {input.document} {input.meta} -o {output}
        '''

rule build_pdfslides:
    input:
        document='{name}.md',
        meta='metadata.yaml',
    output:
        '{name}-slides.pdf'
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t beamer {input.document} {input.meta} -o {output}
        '''

rule build_pdfposter:
    input:
        document='{name}.md',
    output:
        '{name}-poster.{ext}'
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t latex --template badposter {input.document} {input.meta} -o {output}
        '''

rule build_pdfbook:
    input:
        document='{name}.md',
        meta='metadata.yaml',
    output:
        '{name}-ebook.pdf',
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} --metadata='papersize:a5' --metadata='fontsize:12pt' {input.document} {input.meta} -o {output}
        '''

rule epubv2book:
    input:
        document='{name}.md',
        meta='metadata.yaml',
    output:
        '{name}-ebook2.epub',
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t epub {input.document} {input.meta} -o {output}
        '''

rule epubv3book:
    input:
        document='{name}.md',
        meta='metadata.yaml',
    output:
        '{name}-ebook3.epub',
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t epub3 {input.document} {input.meta} -o {output}
        '''

rule build_reveal:
    input:
        document='{name}.md',
        meta='metadata.yaml',
        config="reveal.config",
        reveal="reveal.js/",
    output:
        '{name}-presentation.html'
    shell:
        '''
        pandoc {commonargs} -f {srcfmt} -t revealjs --slide-level={config[slidelevel]} {input.config} {input.document} {input.meta} -o {output}
        '''

rule download_revealjs:
    output:
        'reveal.js/'
    shell:
        '''
        git clone https://github.com/hakimel/reveal.js
        '''

rule make_rose:
    output:
        'rose.png'
    shell:
        'convert rose: rose.png'
